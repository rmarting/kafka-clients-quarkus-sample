#
# Kafka Clients Properties
#
# Kafka Bootstrap Servers
%dev.app.kafka.bootstrap-servers = localhost:9092
%test.app.kafka.bootstrap-servers = localhost:9092
app.kafka.bootstrap-servers = my-kafka-kafka-bootstrap:9092
# Kafka User Credentials
app.kafka.user.name     = application
app.kafka.user.password = ${KAFKA_USER_PASSWORD:undefined}
# To use with plain connections
app.kafka.security.protocol = SASL_PLAINTEXT
#kafka.security.protocol = SASL_SSL

# Producer Properties
app.producer.clienId = kafka-client-quarkus-producer-client
# No ACK
#app.producer.acks = 0
# Leader
#app.producer.acks = 1
# In-Sync
app.producer.acks = -1

# Consumer Properties
app.consumer.groupId	= kafka-client-quarkus-consumer
app.consumer.clientId	= kafka-client-quarkus-consumer-client
# Pooling properties
app.consumer.maxPoolRecords = 1000
app.consumer.maxPartitionFetchBytes = 1048576
# Auto commit
app.consumer.autoCommit = false
# latest | earliest
app.consumer.offsetReset = earliest
# Seconds
app.consumer.poolTimeout = 10

#
# Service Registry
#
%dev.apicurio.registry.url = http://localhost:8080/apis/registry/v2
apicurio.registry.url = http://service-registry-service:8080/apis/registry/v2
apicurio.registry.autoRegisterArtifact = true

#
# Quarkus Kafka Properties (SmallRye Kafka connector)
#
kafka.bootstrap.servers = ${app.kafka.bootstrap-servers}
kafka.security.protocol = ${app.kafka.security.protocol}
kafka.sasl.mechanism = SCRAM-SHA-512
kafka.sasl.jaas.config = org.apache.kafka.common.security.scram.ScramLoginModule required username=${app.kafka.user.name} password=${app.kafka.user.password};

#
# Quarkus Properties
#
quarkus.http.port=8080

# Configure the Kafka source (we read from it)
mp.messaging.incoming.messages.connector=smallrye-kafka
mp.messaging.incoming.messages.group.id=${app.consumer.groupId}-mp-incoming-channel
mp.messaging.incoming.messages.topic=messages
mp.messaging.incoming.messages.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.messages.value.deserializer=io.apicurio.registry.serde.avro.AvroKafkaDeserializer
mp.messaging.incoming.messages.properties.partition.assignment.strategy=org.apache.kafka.clients.consumer.RoundRobinAssignor
mp.messaging.incoming.messages.apicurio.registry.url=${apicurio.registry.url}
#mp.messaging.incoming.messages.apicurio.registry.avro-datum-provider=io.apicurio.registry.utils.serde.avro.ReflectAvroDatumProvider
mp.messaging.incoming.messages.apicurio.registry.use-specific-avro-reader=true
mp.messaging.incoming.messages.apicurio.registry.artifact.version=2.0

#
# Swagger UI Properties
#
quarkus.swagger-ui.always-include=true

mp.openapi.extensions.smallrye.info.title=Kafka Client Spring Boot Application API
%dev.mp.openapi.extensions.smallrye.info.title=Kafka Client Spring Boot Application API (DEV)
%test.mp.openapi.extensions.smallrye.info.title=Kafka Client Spring Boot Application API (TST)
#mp.openapi.extensions.smallrye.info.version=${quarkus.application.version}
mp.openapi.extensions.smallrye.info.description=Sample Spring Boot REST service using OpenAPI 3 to produce and consume messages from a Kafka Cluster
mp.openapi.extensions.smallrye.info.contact.email=jromanmartin@gmail.com
mp.openapi.extensions.smallrye.info.license.name=Apache 2.0
mp.openapi.extensions.smallrye.info.license.url=http://www.apache.org/licenses/LICENSE-2.0.html
